#!/bin/zsh
# random aliases for some of my projects/unrelated shorthands

# https://github.com/purarue/shortcuts
alias journal-render='render-notes'
alias vlogs-render='render-notes'

# https://github.com/purarue/trakt-watch
export URL_OPENER='openurl'
alias trk='trakt-watch'
alias tp='trk progress'
case "$ON_OS" in
android*)
	# just print the URL on android, dont swap applications
	alias tw='trk watch --letterboxd print'
	;;
*)
	# ask me if I want to open the URL on desktop
	alias tw='trk watch --letterboxd prompt'
	;;
esac

# https://github.com/purarue/HPI-personal/blob/master/scripts/trakt-urls
tu() {
	trakt-urls | fzf
}
lb() {
	trk letterboxd --action open "$@"
}

# https://github.com/purarue/plaintext-playlist
source_if_exists -q "$REPOS/plaintext-playlist/functions.sh" || source_if_exists "${HOME}/.local/share/basher/cellar/packages/purarue/plaintext-playlist/functions.sh"
# print cover images for a playlist
covers-for-mp3s() {
	cm
	rcut -d'/' -f2- | unique | tr '\n' '\0' | xargs -0 -I{} find {} -name 'cover.*'
}
play-covers() {
	cm
	play list "$@" | covers-for-mp3s
}
# preview cover images for a playlist in nsxiv
play-covers-preview() {
	cm
	play-covers "$@" | nsxiv -t -
}
play-covers-all() {
	cm
	playrg | unique | covers-for-mp3s
}
play-covers-all-preview() {
	cm
	play-covers-all | nsxiv -t -
}
bindkey -s '^P' "^uplay^M"

# adds a directory to the '___tolisten' playlist, which I use to sync entire albums to my phone temporarily so I can listen to them
tolisten() {
	local mdir="${1:?pass directory as first argument}"
	mdir="$(realpath "$mdir")"
	mdir="$(sed -e "s|^${PLAINTEXT_PLAYLIST_MUSIC_DIR%/}/||" -e "s|^${mdir%/}/||" <<<"$mdir")"
	(
		cd "$PLAINTEXT_PLAYLIST_MUSIC_DIR"
		find "$mdir" -type f -iname '*.mp3' | sort -n | play - add ___tolisten
	)
	play unique ___tolisten
	linkmusic ~/.local/share/musicsync --delete
}

donelistening() {
	local query="$*"
	local playlistfile
	playlistfile="$(plainplay playlistdir)/___tolisten.txt"
	[[ -e "$playlistfile" ]] || {
		echo '___tolisten playlist does not exist' >&2
		return 1
	}
	[[ -z "$query" ]] && {
		echo "no query given, can't remove matching paths..." >&2
		return 1
	}
	grep -vi "$query" <"$playlistfile" | sponge "$playlistfile"
	linkmusic ~/.local/share/musicsync --delete
}
bz() {
	local chosen
	chosen="$(beet-search "$@")"
	[[ -z "$chosen" ]] && return 1
	cd "$(dirname "$chosen")"
}

# https://github.com/purarue/offline_listens
alias 'of=offline_listens listen'

# https://github.com/purarue/albums
alias 'discogs-update=nextalbums discogs-update'
albums-add() {
	nextalbums add-album "$@" && nextalbums discogs-update && nextalbums discogs-update
}
alias albums-rate='nextalbums mark-listened'

# https://github.com/purarue/HPI
source_if_exists "${REPOS}/HPI/scripts/functions.sh"
source_if_exists "${REPOS}/HPI-personal/scripts/functions.sh"
source_if_exists "${REPOS}/my_feed/scripts/functions.sh"

sms-images-review() {
	find "${HOME}/.cache/sms-images" -type f -mtime -"${1:-28}"
}

# https://github.com/purarue/frinkconv
conv() {
	local args=()
	for arg in "$@"; do
		# replace '--' or with '->'. its annoying to type
		# '->' in the shell (since you need to add quotes)
		if [[ arg == "--" ]]; then
			args+=("->")
		else
			args+=("$arg")
		fi
	done
	frinkconv "${args[*]}"
}

# https://github.com/purarue/oh-my-stars
alias sz='mystarsfzf'

# https://github.com/purarue/reminder-sink
sr() {
	case "${#@}" in
	0) reminder-sink run ;;
	*) reminder-sink "$@" ;;
	esac
}
alias srd='REMINDER_SINK_DEBUG=1 sr'
alias rs='reminder-sink-silence'
reminder-list() {
	tr ':' '\n' <<<"$REMINDER_SINK_PATH" | parallel --keep-order fd . '{}' --type f
}
reminder-edit() {
	reminder-list | fzf-edit "$*"
}
reminder-toggle() {
	local chosen
	chosen="$(reminder-list | fzfp -q "$*")"
	[[ -z "$chosen" ]] && return 1
	reminder-sink toggle "$chosen"
}

# https://github.com/purarue/calc_ans
alias c=calc_ans_rlwrap

# https://github.com/purarue/calcurse-load
alias calcurse=calcursed

# vps related
# https://github.com/purarue/vps
source_if_exists -q "$REPOS/vps/functions.sh"

# Alt+Shift+L to print live twitch channels
# https://github.com/purarue/twitchlive
alias twitchlive-table='twitchlive --output-format=table'
bindkey -s '^[L' 'twitchlive-table\n'

# https://github.com/purarue/exobrain
exo() {
	cd "$REPOS/exobrain" || return 1
	./scripts/exo "$@"
}

# https://github.com/purarue/greasyfork_repo_generator
alias greasyfork_generate='cd ${REPOS}/greasyfork_repo_generator && mix escript.build && greasyfork_archive 96096 --output-file scraped_data.json && ./greasyfork_repo_generator -j scraped_data.json --output-dir ../greasyfork --ignore-ids 37826 && cd ../greasyfork && git status'

# https://github.com/purarue/ttally
TTALLY_ALIASES="${HOME}/.cache/ttally_aliases"
if [[ ! -e "${TTALLY_ALIASES}" ]]; then
	if hash ttally; then
		python3 -m ttally generate >"${TTALLY_ALIASES}"
	fi
fi
[[ -e "${TTALLY_ALIASES}" ]] && source "${TTALLY_ALIASES}"
alias 'czd=PROMPT_DATETIME=1 cz'
alias 'czl=while cz; do; done'
alias 'cze=ttally edit-recent food -l'
alias 'ca=food-now'
b-() {
	echo -n "cals: "
	b-calories "$@"
	echo -n "water: "
	b-water "$@"
}
alias sn='self-now'
alias self-edit='editor "$HPIDATA/.self_types.txt"'
alias snl='while self-now; do; done'
alias fl='flipflop.py'
alias fls='fl status'
alias fle
flf() {
	fl flip
	fls
}
alias flip-edit='editor "$HPIDATA/.flipflop.txt"'

# https://github.com/purarue/tts
alias tts-say='tts -d /tmp/tts.mpeg && plaympeg /tmp/tts.mpeg'

# https://github.com/purarue/mpv-sockets
# cd to the directory where the current piece of media is playing from
alias mpv-cd-currently-playing='cd "$(dirname "$(mpv-currently-playing)")"'
alias mpv-currently-playing-image='rr "$(dirname "$(mpv-currently-playing)")"/cover.jpg'
alias mpv-percent='mpv-get-property "$(mpv-currently-playing --socket | tail -n1)" percent-pos'
mpv-currently-playing-mark-nsfw() {
	local playing_path playing_dir
	playing_path="$(mpv-currently-playing)"
	[[ -z "$playing_path" ]] && return 1
	playing_dir="$(dirname "$playing_path")"
	touch "${playing_dir}/.nsfw"
	echo "marked as NSFW: ${playing_dir}"
}
alias mpv-play-all='mpv-pause-all false'

curplaying-text() {
	python3 -m currently_listening_py print --server-url 'wss://sean.fish/currently_listening/ws' -o text
}

# https://github.com/purarue/currently_listening
curplaying-image() {
	python3 -m currently_listening_py print --server-url 'wss://sean.fish/currently_listening/ws' -o image 2>/dev/null &&
		kitty icat --align=left ~/.cache/currently-listening-py/currently_listening.jpg
}

curplaying() {
	if [[ "$TERM" == 'xterm-kitty' ]]; then
		curplaying-image
	else
		curplaying-text
	fi
}

# https://github.com/purarue/rifleman
alias optimg='rifleman -a image'

# https://github.com/purarue/malexport
mal-manual-all() {
	_filter() {
		if [[ -n "$1" ]]; then
			tail -n "$1"
		else
			cat
		fi
	}
	malexport parse manual-history -o jsonl | jq '"\(.at)\t\(.title)\t\(.number)"' -r | sort -n | _filter "$@" | localize-datetimes | awk -F'\t' '{print "# " $2 "\n" $1 " - Episode " $3 }' | glow
	unfunction _filter
}
mal-manual() {
	local count
	count="$(is-integer "$1")"
	mal-manual-all "${count:-10}"
}
ma() {
	local args=()
	if [[ -n "$1" ]]; then
		args+=("$@")
	else
		# default if nothing passed
		args+=(--at "$(epoch)")
	fi
	malexport manual-history "${args[@]}" || return $?
	mal-manual
}

# https://github.com/purarue/clone-repos
alias cr="python3 -m pip install --break-system-packages 'git+https://github.com/purarue/clone-repos' && clone-repos -B"
alias cr-hpi='clone-repos -B ~/.config/clone-repos/hpi-clone-repos.yaml'
alias uf=update-forks

# https://github.com/purarue/evry
# https://github.com/purarue/bgproc
source "${REPOS}/evry/functions.sh"
# reset a job with job-reset, then run all jobs
job-run() {
	job-reset "$@" || return $?
	bgproc_on_machine -on
	havecmd housekeeping && housekeeping
}
_job-run() {
	local tags
	tags="$(find "$(evry location - 2>/dev/null)" | awk -F'/' '{printf $NF " "}')"
	_arguments "1:tags:(${tags})"
}
compdef _job-run job-run run-job job-reset

job-edit() {
	tr ':' '\n' <<<"$BGPROC_PATH" | parallel --keep-order fd . '{}' --type f | fzf-edit "$*"
}

# search for cubing competitions near me
# https://sean.fish/d/wca-comps?redirect
wca-local() {
	local state
	# use my IP address to fetch what state/region I'm currently in
	# https://sean.fish/d/ipinfo?dark
	state="${1:-$(ipinfo | grep 'region' | cut -d":" -f2- | chomp | lower)}"
	wca-comps | jq -r '.[] | "\(.date) - \(.name) - \(.location)"' | grep -i "${state}"
}

# https://github.com/purarue/scramble-history
cube-event-descriptions() {
	scramble_history merge -a json | jq '.[].event_description' -r | unique
}
alias _cube-stats-merge='scramble_history merge -g event_description -a stats "$@"'
cube-stats() {
	_cube-stats-merge -q 'event_description?=["3x3", "3x3 OH", "2x2", "4x4", "5x5"]' "$@"
}
alias cube-stats-graphs='cube-stats -G'
alias cube-stats-all=_cube-stats-merge
alias cube-stats-all-graphs='cube-stats-all -G'
cube-stats-for() {
	local chosen
	chosen="$(cube-event-descriptions | fzf -q "$*")"
	[[ -z "$chosen" ]] && return 1
	shift $#

	echo "Running: scramble_history merge -g event_description -a stats -q 'event_description?=[\"${chosen}\"]'" >&2
	scramble_history merge -g event_description -a stats -q "event_description?=[\"${chosen}\"]"
}
