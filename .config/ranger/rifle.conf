# vim: ft=rifleconfig
#
# This is the configuration file of "rifle", ranger's file executor/opener.
# Each line consists of conditions and a command.  For each line the conditions
# are checked and if they are met, the respective command is run.
#
# Syntax:
#   <condition1> , <condition2> , ... = command
#
# The command can contain these environment variables:
#   $1-$9 | The n-th selected file
#   $@    | All selected files
#
# If you use the special command "ask", rifle will ask you what program to run.
#
# Prefixing a condition with "!" will negate its result.
# These conditions are currently supported:
#   match <regexp> | The regexp matches $1
#   ext <regexp>   | The regexp matches the extension of $1
#   mime <regexp>  | The regexp matches the mime type of $1
#   name <regexp>  | The regexp matches the basename of $1
#   path <regexp>  | The regexp matches the absolute path of $1
#   has <program>  | The program is installed (i.e. located in $PATH)
#   env <variable> | The environment variable "variable" is non-empty
#   file           | $1 is a file
#   directory      | $1 is a directory
#   number <n>     | change the number of this command to n
#   terminal       | stdin, stderr and stdout are connected to a terminal
#   X              | A graphical environment is available (darwin, Xorg, or Wayland)
#
# There are also pseudo-conditions which have a "side effect":
#   flag <flags>  | Change how the program is run. See below.
#   label <label> | Assign a label or name to the command so it can
#                 | be started with :open_with <label> in ranger
#                 | or `rifle -p <label>` in the standalone executable.
#   else          | Always true.
#
# Flags are single characters which slightly transform the command:
#   f | Fork the program, make it run in the background.
#     |   New command = setsid $command >& /dev/null &
#   r | Execute the command with root permissions
#     |   New command = sudo $command
#   t | Run the program in a new terminal.  If $TERMCMD is not defined,
#     | rifle will attempt to extract it from $TERM.
#     |   New command = $TERMCMD -e $command
# Note: The "New command" serves only as an illustration, the exact
# implementation may differ.
# Note: When using rifle in ranger, there is an additional flag "c" for
# only running the current file even if you have marked multiple files.

# Notes:
# See https://github.com/ranger/ranger/blob/1654128f955b320354eea98a0bb6970a159ab16f/ranger/ext/rifle.py#L249-L272
# for how rifle manages mime types.
# TL;DR: check some default user dirs for mimetype files, then file --mime-type -Lb, then mimetype

# ttt is littered throughout here, to track rifle launces
# see https://github.com/purarue/ttt/ for more info

#-------------------------------------------
# Websites
#-------------------------------------------
ext x?html?, has firefox-developer-edition, X, flag f = ttt firefox-developer-edition --new-tab "$1"
# mime text/html, has firefox-developer-edition, X, flag f = firefox-developer-edition --new-tab "$1"

#-------------------------------------------
# Misc
#-------------------------------------------

# Handle some file extensions before text files
# These are text files but should be opened with specific
# applications
ext desktop, file, has dex, X, flag f = ttt dex "$@"
ext pickle, file, has show-pickle = ttt show-pickle "$1" | lessi
ext sqbpro, has sqlitebrowser-, X, flag f = ttt sqlitebrowser- "$1"
ext sqbpro, has sqlitebrowser, X, flag f = ttt sqlitebrowser "$1"
ext gpx, has gpxsee, X, flag f = ttt gpxsee "$1"

# Define the "editor" for text files as first action
mime ^text, label editor = ttt $VISUAL -- "$@"
# define label pager so it can be used with 'rifle -p pager <filename> to open in pager
mime ^text, label pager = ttt lessi -- "$@"
label editor, ext srt|scm|astro|norg|mdx|sml|m|rs|coffee|dart|lua|go|mod|tsx|ts|sql|xml|json|csv|tex|py|pl|rb|js|mjs|sh|php|nim = ttt $VISUAL -- "$@"
label pager, ext srt|scm|astro|norg|mdx|sml|m|rs|coffee|dart|lua|go|mod|tsx|ts|sql|xml|json|csv|tex|py|pl|rb|js|mjs|sh|php|nim = ttt lessi -- "$@"
# org mode files
ext org = editor -c -- "$@"

# handle jupter notebooks
ext ipynb, has jupyter-notebook = ttt jupyter-notebook "$1"
# handle json items that dont end with .json
mime .*json = ttt $VISUAL -- "$@"
# Directory
directory = ttt ranger "$1"
# Man Files
file, ext 1 = ttt man "$1"
# SNES
ext s[wmf]c, has snes9x-gtk, X = ttt snes9x-gtk "$1"
# keepassxc
ext kdbx, has keepassxc, X, flag f = ttt keepassxc "$1"
# sqlite
ext sqlite, has sqlitebrowser-, X, flag f = ttt sqlitebrowser- "$1"
ext sqlite, has sqlitebrowser, X, flag f = ttt sqlitebrowser "$1"
mime application/x-sqlite3, has sqlitebrowser-, X, flag f = ttt sqlitebrowser- "$1"
mime application/x-sqlite3, has sqlitebrowser, X, flag f = ttt sqlitebrowser "$1"
mime application/vnd.sqlite3, has sqlitebrowser-, X, flag f = ttt sqlitebrowser- "$1"
mime application/vnd.sqlite3, has sqlitebrowser, X, flag f = ttt sqlitebrowser "$1"

#--------------------------------------------
# Video/Audio with a GUI
#-------------------------------------------
# Use https://github.com/FluidSynth/fluidsynth/wiki/SoundFont
# with VLC to play midi files
mime audio/midi, has vlc, X, flag f = ttt vlc -- "$@"
# fork if watching video
mime ^video, has mpv, flag f = ttt mpv-logfile -- "$@"
mime application/x-iso9660-image, has mpv, flag f = ttt mpv -- "$@"
# block terminal with mpv output if audio
# so that I have access to a terminal for controls
# else it just plays a fork in the background, un-interactable
mime ^audio, has mpv = ttt mpv --no-audio-display -- "$@"

#-------------------------------------------
# Documents
#-------------------------------------------
# If I'm reading books, use okular to save page numbers
ext pdf, has okular, path [Bb]ooks,  X, flag f = ttt okular -- "$@"
# else default to mupdf
ext pdf, has mupdf, X, flag f = ttt mupdf "$@"
# also fallback to allow me to open with this
ext pdf, has okular, X, flag f = ttt okular "$@"

ext sxc|xlsx?|xlt|xlw|gnm|gnumeric, has gnumeric, X, flag f = ttt gnumeric -- "$@"
ext sxc|xlsx?|xlt|xlw|gnm|gnumeric, has kspread, X, flag f = ttt kspread -- "$@"
ext pptx?|od[dfgpst]|docx?|sxc|xlsx?|xlt|xlw|gnm|gnumeric, has libreoffice, X, flag f = ttt libreoffice "$@"
ext pptx?|od[dfgpst]|docx?|sxc|xlsx?|xlt|xlw|gnm|gnumeric, has soffice, X, flag f = ttt soffice "$@"
ext pptx?|od[dfgpst]|docx?|sxc|xlsx?|xlt|xlw|gnm|gnumeric, has ooffice, X, flag f = ttt ooffice "$@"
ext epub, has mupdf, X, flag f = ttt mupdf -- "$@"

#-------------------------------------------
# Images
#-------------------------------------------
# Linux
mime image/gif, has nsxiv, X, flag f = ttt nsxiv -a -- "$@"
mime ^image, has nsxiv, X, flag f = ttt nsxiv -- "$@"
# Mac OS
mime image/gif, has mpv, flag f = ttt mpv -- "$@"
mime ^image, flag f = ttt open -a Preview -- "$@"

#-------------------------------------------
# Archives
#-------------------------------------------

# avoid password prompt by providing empty password
ext 7z, has 7z = 7z -p l "$@" | lessi
# This requires atool
ext ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz, has atool = ttt atool --list --each -- "$@" | lessi
ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip, has atool = ttt atool --list --each -- "$@" | lessi
ext 7z|ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz, has atool = ttt atool --extract --each -- "$@"
ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip, has atool = ttt atool --extract --each -- "$@"

# Listing and extracting archives without atool:
ext tar|gz|bz2|xz, has tar = ttt tar vvtf "$1" | lessi
ext zip, has unzip = ttt unzip -l "$1" | lessi
ext ace, has unace = ttt unace l "$1" | lessi
ext rar, has unrar = ttt unrar l "$1" | lessi

#-------------------------------------------
# Fonts
#-------------------------------------------
mime ^font, has fontforge, X, flag f = ttt fontforge "$@"

#-------------------------------------------
# Flag t fallback terminals
#-------------------------------------------
mime ^ranger/x-terminal-emulator, has alacritty = ttt alacritty -e "$@"
mime ^ranger/x-terminal-emulator, has termite = ttt termite -x '"$@"'


#-------------------------------------------
# Disabled MimeTypes
#-------------------------------------------
# In other words, these are mimetypes I wouldn't
# want to call from ranger. They should just display
# exifinfo (my modified exiftool script - to print correct mime types)
# to give me some info about the file.
mime application/x-sharedlib = ttt exifinfo "$@" | lessi
mime application/x-executable = ttt exifinfo "$@" | lessi
mime application/x-pie-executable = ttt exifinfo "$@" | lessi

#-------------------------------------------
# Generic file openers
#-------------------------------------------
# dont actually open the file, print info and
# the mime-type so that I can add a line
# to rifle.conf to specify an application.
label open = exifinfo "$@" | lessi
