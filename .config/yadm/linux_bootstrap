#!/usr/bin/env bash
# called from yadm bootstrap when linux is detected
# uses paru to install from the AUR

# TODO: I need to source ~/.profile on boot somehow? would be nice
# to have my $PATH and other stuff updated for system processes

declare -rx PACKAGE_LIST="${PACKAGE_DIR}/arch_packages.txt"
declare -rx X11_LIST="${PACKAGE_DIR}/arch_packages_x11.txt"
declare -rx WAYLAND_LIST="${PACKAGE_DIR}/arch_packages_wayland.txt"
declare -rx LINUX_PYTHON_PACKAGE_LIST="${PACKAGE_DIR}/linux_python3_packages.txt"

# set zsh as shell
if ! echo "${SHELL}" | grep -q '/zsh'; then
	havecmd zsh || sudo pacman -S zsh
	sudo chsh -s "$(command -v zsh)" "$(whoami)"
	abort "Restart shell so that zsh environment is setup. Then re-run 'yadm bootstrap'"
else
	echo "zsh is already set as your default shell"
fi

# setup zsh files
echo 'Setting up zsh directory structure...'
# make sure original zsh files are removed
original_files=("${HOME}/.zshenv" "${HOME}/.zshrc" "${HOME}/.zsh_history" "${HOME}/.zprofile")

for file in "${original_files[@]}"; do
	rm -rf "${file}"
done

# so that zsh thinks its setup
# rest of my setup is done is ~/.profile
[[ -f "${HOME}/.zshenv" ]] || touch "${HOME}/.zshenv"

# install go, so I can install some personal golang tools
[[ $(paru -Q go) ]] || paru -S go
install_go_cmds || exit $?

# paru/pacman to install packages from arch repos
echo "Checking ~/.config/yadm/package_lists for any system packages to install..."
# have to use for loop, while loop times out instantly
for lib in $(spkglist "${PACKAGE_LIST}"); do
	if [[ ! $(paru -Q "${lib}" 2>/dev/null) ]]; then # if package isn't installed
		paru -S --noconfirm "${lib}"
	fi
done

if [[ -n "$WAYLAND_DISPLAY" ]]; then
	echo "Installing wayland packages..."
	for lib in $(spkglist "${WAYLAND_LIST}"); do
		if [[ ! $(paru -Q "${lib}" 2>/dev/null) ]]; then # if package isn't installed
			paru -S --noconfirm "${lib}"
		fi
	done
else
	echo "Installing X11 packages..."
	for lib in $(spkglist "${X11_LIST}"); do
		if [[ ! $(paru -Q "${lib}" 2>/dev/null) ]]; then # if package isn't installed
			paru -S --noconfirm "${lib}"
		fi
	done
fi

# install linux related python packages
havecmd python3 || exit $?
echo "Installing linux-specific python packages..."
python3 -m pip install -q --user --break-system-packages -r "${LINUX_PYTHON_PACKAGE_LIST}"

# check if a systemd service is running
check_service() {
	local SERVICE_NAME
	local -a ADDITIONAL_FLAGS=()
	SERVICE_NAME="${1:?Must provide name of service}"
	shift
	while [[ -n "$1" ]]; do
		ADDITIONAL_FLAGS+=("$1")
		shift
	done
	if [[ "$(systemctl "${ADDITIONAL_FLAGS[@]}" show -p SubState --value "${SERVICE_NAME}")" == "dead" ]]; then
		print_error "${SERVICE_NAME} is not running, you should enable it with: 'systemctl ${ADDITIONAL_FLAGS[*]} enable ${SERVICE_NAME} --now'"
	fi

}

# Check services
echo "Checking if default services are running..."
# CUPS and avahi are for printing
SERVICES=("NetworkManager" "ntpd")
for serv in "${SERVICES[@]}"; do
	check_service "${serv}"
done

# user services, dont start till my user logs in
USER_SERVICES=("syncthing")
for serv in "${USER_SERVICES[@]}"; do
	check_service "${serv}" --user
done

# setup https://github.com/dandavison/delta
git config --global core.pager "delta"
git config --global interactive.diffFilter "delta --color-only"
git config --global delta.navigate true
git config --global delta.light false
git config --global merge.conflictstyle diff3
git config --global diff.colorMoved default
git config --global delta.line-numbers true
git config --global delta.theme DarkNeon

yadm gitconfig core.pager "delta"
yadm gitconfig interactive.diffFilter "delta --color-only"
yadm gitconfig delta.navigate true
yadm gitconfig delta.light false
yadm gitconfig merge.conflictstyle diff3
yadm gitconfig diff.colorMoved default
yadm gitconfig delta.line-numbers true
yadm gitconfig delta.theme DarkNeon

# Setup mariadb by following: https://wiki.archlinux.org/index.php/MariaDB
# Check for manually installed binaries, installed at /usr/local/bin

# make sure https://github.com/purarue/bgproc is running
# shellcheck disable=SC2009
ps -ef | grep "bgproc" | grep -q bash || print_error "bgproc isn't running!"
